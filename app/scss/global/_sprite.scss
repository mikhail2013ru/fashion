// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$accessories1-name: 'accessories1';
$accessories1-x: 391px;
$accessories1-y: 0px;
$accessories1-offset-x: -391px;
$accessories1-offset-y: 0px;
$accessories1-width: 262px;
$accessories1-height: 209px;
$accessories1-total-width: 653px;
$accessories1-total-height: 418px;
$accessories1-image: '../sprites/sprite.png';
$accessories1: (391px, 0px, -391px, 0px, 262px, 209px, 653px, 418px, '../sprites/sprite.png', 'accessories1', );
$accessories2-name: 'accessories2';
$accessories2-x: 0px;
$accessories2-y: 209px;
$accessories2-offset-x: 0px;
$accessories2-offset-y: -209px;
$accessories2-width: 244px;
$accessories2-height: 209px;
$accessories2-total-width: 653px;
$accessories2-total-height: 418px;
$accessories2-image: '../sprites/sprite.png';
$accessories2: (0px, 209px, 0px, -209px, 244px, 209px, 653px, 418px, '../sprites/sprite.png', 'accessories2', );
$accessories3-name: 'accessories3';
$accessories3-x: 460px;
$accessories3-y: 209px;
$accessories3-offset-x: -460px;
$accessories3-offset-y: -209px;
$accessories3-width: 179px;
$accessories3-height: 209px;
$accessories3-total-width: 653px;
$accessories3-total-height: 418px;
$accessories3-image: '../sprites/sprite.png';
$accessories3: (460px, 209px, -460px, -209px, 179px, 209px, 653px, 418px, '../sprites/sprite.png', 'accessories3', );
$accessories4-name: 'accessories4';
$accessories4-x: 0px;
$accessories4-y: 0px;
$accessories4-offset-x: 0px;
$accessories4-offset-y: 0px;
$accessories4-width: 391px;
$accessories4-height: 209px;
$accessories4-total-width: 653px;
$accessories4-total-height: 418px;
$accessories4-image: '../sprites/sprite.png';
$accessories4: (0px, 0px, 0px, 0px, 391px, 209px, 653px, 418px, '../sprites/sprite.png', 'accessories4', );
$accessories5-name: 'accessories5';
$accessories5-x: 244px;
$accessories5-y: 209px;
$accessories5-offset-x: -244px;
$accessories5-offset-y: -209px;
$accessories5-width: 216px;
$accessories5-height: 209px;
$accessories5-total-width: 653px;
$accessories5-total-height: 418px;
$accessories5-image: '../sprites/sprite.png';
$accessories5: (244px, 209px, -244px, -209px, 216px, 209px, 653px, 418px, '../sprites/sprite.png', 'accessories5', );
$spritesheet-width: 653px;
$spritesheet-height: 418px;
$spritesheet-image: '../sprites/sprite.png';
$spritesheet-sprites: ($accessories1, $accessories2, $accessories3, $accessories4, $accessories5, );
$spritesheet: (653px, 418px, '../sprites/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
